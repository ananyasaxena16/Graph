class Solution {
    public int numIslands(char[][] grid) {
        int count = 0;
        for(int i = 0; i<grid.length; i++)
        {
            for(int j = 0; j<grid[0].length; j++)
            {
                if(grid[i][j]=='1')//found an unvisited land i.e., an island
                {
                    count++;
                helper(grid,i, j); //visit and mark all the connected area(unvisited land);
                }
            }
        }
    return count; 
        
    }
    
    
    static int dir[][] = {{-1, 0}, {0, +1}, {+1, 0}, {0,-1}};//offsets for north, east, sount & west
    public void helper(char[][] grid, int r, int c){
        grid[r][c] = '2'; //mark
        for(int d = 0; d<4;d++)
        {
            int rowdash = r+ dir[d][0];
            int coldash = c+dir[d][1];
            if(rowdash<0||coldash<0||rowdash>=grid.length||coldash>=grid[0].length||grid[rowdash][coldash]!='1'){
                continue; //aage chalo
            }
            helper(grid, rowdash, coldash);
            
        }
        
        
    }
}
